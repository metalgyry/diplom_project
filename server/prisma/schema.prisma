// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Students {
  id_student  Int @default(autoincrement()) @id
  login String  @unique
  password String
  full_name String
  groups Groups @relation(fields: [id_group], references: [id_group])
  id_group  Int
  chatMessages GroupChatMessages[]
  courses Courses[]
  projects StudentProjects[]
  createdProjects GroupProjects[]
  projectTasks ProjectTasks[]
}

model GroupChatMessages {
  id_message  Int @default(autoincrement()) @id
  group Groups @relation(fields: [id_group], references: [id_group], onDelete: Cascade)
  id_group Int
  content String
  student Students @relation(fields: [id_creator], references: [id_student])
  id_creator Int
  full_name String
  date DateTime? @db.Timestamptz(6)   @default(now())
  updated Boolean @default(false)

  @@map("Group chat messages")
}

model StudentProjects {
  groupProject GroupProjects @relation(fields: [id_group_project], references: [id_group_project], onDelete: Cascade)
  id_group_project Int
  student Students @relation(fields: [id_student], references: [id_student], onDelete: Cascade)
  id_student Int

  @@id([id_group_project, id_student])
  @@map("Student projects")
}

model GroupProjects {
  id_group_project Int  @default(autoincrement()) @id
  name String
  student Students @relation(fields: [id_creator], references: [id_student])
  id_creator Int
  name_creator String
  students StudentProjects[]
  tasks ProjectTasks[]

  @@map("Group projects")
}

model ProjectTasks {
  id_task Int @default(autoincrement()) @id
  content String
  student Students @relation(fields: [id_creator], references: [id_student])
  id_creator Int
  creator_name String
  status Int? @default(0)
  project GroupProjects @relation(fields: [id_group_project], references: [id_group_project], onDelete: Cascade)
  id_group_project Int

  @@map("Project tasks")
}

model Tasks {
  id_task Int @default(autoincrement()) @id
  content String
  date String
  priority Int @default(2)
  course Courses  @relation(fields: [id_course], references: [id_course], onDelete: Cascade)
  id_course Int
  subTasks SubTasks[]
}

model SubTasks {
  id_subtask Int  @default(autoincrement()) @id
  task Tasks  @relation(fields: [id_task], references: [id_task], onDelete: Cascade)
  id_task Int
  content String
  priority Int  @default(2)
}

model Courses {
  id_course Int @default(autoincrement()) @id
  name String @unique
  student Students @relation(fields: [id_creator], references: [id_student], onDelete: Cascade)
  id_creator Int
  tasks Tasks[]
}

model Groups {
  id_group Int @default(autoincrement()) @id
  name String @unique
  students Students[]
  chat_messages GroupChatMessages[]
}